package jpixeleditor.tools;

import java.awt.Point;
import java.awt.event.MouseEvent;

import javax.swing.SwingUtilities;

import jpixeleditor.ui.CanvasContainer;
import jpixeleditor.ui.ToolConfigPanel.ToolSettings;
import jpixeleditor.utils.Colour;
import jpixeleditor.utils.EditorTools;
import jpixeleditor.utils.EditorTools.ToolInfo;

public abstract class Tool
{
	public String name;
	public String description;
	public String keyShortcut;
	public String iconPath;
	public int id;
	public boolean isSelector;
	public boolean sizeMatters;
	
	public ToolSettings settings;
	
	protected enum MouseButton
	{
		LEFT,
		RIGHT,
		MIDDLE,
		NONE
	}
	
	/**
	 * Stores the current mouse position as a grid coordinate
	 */
	protected Point curr = new Point();
	
	/**
	 * Stores the previous mouse position as a grid coordinate
	 */
	protected Point prev = new Point();
	
	/**
	 * Stores the mouse position the last time the mouse was pressed as a grid coordinate
	 */
	protected Point start = new Point();
	
	/**
	 * Stores the current button pressed
	 */
	protected MouseButton currMouseButton;
	
	private boolean firstDragEvent = true;
	public int triggerType;
	
	public Tool(int id)
	{
		this.id = id;
		settings = new ToolSettings();
	}
	
	/**
	 * Handles what this tool does when the mouse is pressed
	 * Override this and call super.onMousePressed to automatically set the curr and start Points to the current mouse press position
	 * It leaves the prev Point as where the mouse was last released
	 * @param me The MouseEvent generated by the mouse press
	 */
	public void onMousePressed(MouseEvent me)
	{
		firstDragEvent = true;
		curr = CanvasContainer.canvas.surface.canvasToGrid(me.getX(), me.getY());
		currMouseButton = getMouseButton(me);
		start = (Point)curr.clone();
	}
	
	/**
	 * Handles what this tool does when the mouse is dragged
	 * Override this and call super.onMouseDragged to automatically set the curr Point to the current mouse press position and the prev Point to where the mouse was last
	 * It leaves the start Point as where the mouse was last pressed
	 * @param me The MouseEvent generated by the mouse drag
	 */
	public void onMouseDragged(MouseEvent me)
	{
		if(firstDragEvent)
			prev = (Point)start.clone();
		else
			prev = (Point)curr.clone();
		curr = CanvasContainer.canvas.surface.canvasToGrid(me.getX(), me.getY());
		currMouseButton = getMouseButton(me);
		firstDragEvent = false;
	}
	
	/**
	 * Handles what this tool does when the mouse is released
	 * Override this and call super.onMouseReleased to automatically set the curr Point to the current mouse press position and the prev Point to where the mouse was last
	 * It leaves the start Point as where the mouse was last pressed
	 * @param me The MouseEvent generated by the mouse release
	 */
	public void onMouseReleased(MouseEvent me)
	{
		if(firstDragEvent)
			prev = (Point)start.clone();
		else
			prev = (Point)curr.clone();
		curr = CanvasContainer.canvas.surface.canvasToGrid(me.getX(), me.getY());
		currMouseButton = getMouseButton(me);
		firstDragEvent = false;
	}
	
	/**
	 * Handles what this tool does when the mouse is clicked
	 * Override this and call super.onMouseClicked to automatically set the curr Point to the current mouse press position and the prev Point to where the mouse was last
	 * It leaves the start Point as where the mouse was last pressed
	 * @param me The MouseEvent generated by the mouse release
	 */
	public void onMouseClicked(MouseEvent me)
	{
		curr = CanvasContainer.canvas.surface.canvasToGrid(me.getX(), me.getY());
		currMouseButton = getMouseButton(me);
		prev = (Point)curr.clone();
		start = (Point)prev.clone();
	}
	
	protected MouseButton getMouseButton(MouseEvent me)
	{
		if(SwingUtilities.isLeftMouseButton(me))
			return MouseButton.LEFT;
		else if(SwingUtilities.isRightMouseButton(me))
			return MouseButton.RIGHT;
		else if(SwingUtilities.isMiddleMouseButton(me))
			return MouseButton.MIDDLE;
		else
			return MouseButton.NONE;
	}
	
	/**
	 * Gets the colour for the current mouse information - Returns the primary colour if the current button is the left button, the secondary colour if the right mouse button is pressed, Colour.TRANSPARENT is else
	 * @param swap If true, returns the secondary colour for left mouse button and primary for right
	 * @return The primary or secondary colour as defined in EditorTools
	 */
	protected int getColour()
	{
		switch(currMouseButton)
		{
			case LEFT:
				return EditorTools.primaryColour;
				
			case RIGHT:
				return EditorTools.secondaryColour;
				
			default:
				return Colour.TRANSPARENT;
		}
	}
	
	public boolean isSelector()
	{
		return false;
	}
}
